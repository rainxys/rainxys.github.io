<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Frida</title>
      <link href="/article/2021-05-01-Frida/"/>
      <url>/article/2021-05-01-Frida/</url>
      
        <content type="html"><![CDATA[<!-- * content --><!-- {:toc} --><h3 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h3><ul><li><strong>官方文档：<a href="https://frida.re/docs">https://frida.re/docs</a></strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install frida</span><br><span class="line">pip install frida-tools </span><br></pre></td></tr></table></figure><ul><li><strong>frida语法代码提示插件</strong></li></ul><p><a href="https://github.com/frida/frida-gum/">https://github.com/frida/frida-gum/</a></p><p><a href="http://www.yxfzedu.com/rs_show/115">为Frida编写一个Java代码提示及自动补全插件_游戏逆向 (yxfzedu.com)</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @types/frida-gum   # -g 全局安装</span><br></pre></td></tr></table></figure><ul><li><strong>下载对应cpu架构和版本的frida服务并运行</strong></li></ul><p>地址：<a href="https://github.com/frida/frida/releases">https://github.com/frida/frida/releases</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过adb复制frida-server到手机 https://frida.re/docs/android/</span></span><br><span class="line">adb push frida-server /data/local/tmp </span><br><span class="line">chmod 777 frida-server</span><br><span class="line">./frida-server</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">stening on localhost:27042 by default 默认监听TCP 27042端口</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前运行的进程</span></span><br><span class="line">frida-ps -U </span><br></pre></td></tr></table></figure><h3 id="二、基本使用"><a href="#二、基本使用" class="headerlink" title="二、基本使用"></a>二、基本使用</h3><h4 id="1、frida-trace"><a href="#1、frida-trace" class="headerlink" title="1、frida-trace"></a>1、frida-trace</h4><p><strong>frida-trace -U -i [函数名] [程序包名]</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 命令帮助</span><br><span class="line">frida-trace --help</span><br><span class="line"># 跟踪twitter应用函数 recv* read* 调用</span><br><span class="line">frida-trace -i &quot;recv*&quot; -i &quot;read*&quot; twitter</span><br><span class="line"># 在 Chrome 中跟踪 open（） 调用</span><br><span class="line">frida-trace -U -i open com.android.chrome</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 静态注册</span><br><span class="line">frida-trace -UF -i &quot;Java_com*&quot;</span><br><span class="line">-UF 意指附加到手机最前台的应用，即当前运行的应用，所以记得先打开App。</span><br><span class="line">-i “Java_com*”意指Hook 该app当前加载的所有以&quot;Java_com&quot;开头的native函数，-i 后面双引号里是函数名，支持正则表达式的语法。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 动态注册（下载脚本:https://github.com/lasting-yang/frida_hook_libart）</span><br><span class="line">frida -U -f tv.danmaku.bili -l hook_RegisterNatives.js  --no-pause  </span><br><span class="line">-f为spawn模式(需指定应用包名，--no-pause 立即执行)  -F为当前打开的应用名（attach模式）</span><br></pre></td></tr></table></figure><h4 id="2、frida-cli命令"><a href="#2、frida-cli命令" class="headerlink" title="2、frida-cli命令"></a>2、frida-cli命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">attach启动（进程注入）</span></span><br><span class="line">frida -U app_name -l script.js # 方式一</span><br><span class="line">frida -U  com.ss.android.ugc.aweme -l .\douyin\hook_gorgon.js # 例子</span><br><span class="line">frida -UF -l script.js # 方式二 ,-F为当前打开的应用名</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">spawn模式（重启应用）</span></span><br><span class="line">frida -U -f app_name -l hook_RegisterNatives.js  --no-pause # --no-pause 立即执行主程序（不停在界面） -f 指定应用名</span><br><span class="line">frida -U -f com.ss.android.ugc.aweme -l hook_RegisterNatives.js  --no-pause  # 例子</span><br></pre></td></tr></table></figure><h4 id="3、Java-方法合集"><a href="#3、Java-方法合集" class="headerlink" title="3、Java.* 方法合集"></a><strong>3、Java.* 方法合集</strong></h4><ul><li><strong>Java.perform：Java.perform(fn)在Javascript代码成功被附加到目标进程时调用</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><strong>Java.available</strong></li></ul><p>​       这个字段标记Java虚拟机（例如： Dalvik 或者 ART）是否已加载, 操作Java任何东西之前，要确认这个值是否为true</p><ul><li><p><strong>Java.cast</strong></p><p>用<code>Java.cast</code>方法来对一个对象进行类型转换，如将<code>variable</code>转换成<code>java.lang.String</code></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">StringClass</span>=<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">NewTypeClass</span>=<span class="title class_">Java</span>.<span class="title function_">cast</span>(variable,<span class="title class_">StringClass</span>);</span><br></pre></td></tr></table></figure><h3 id="三、进阶语法"><a href="#三、进阶语法" class="headerlink" title="三、进阶语法"></a>三、进阶语法</h3><h5 id="1、-演示如何监视-jvm-dll该-jvm-正在由名为-fledge-exe（BB-模拟器）的进程使用-Frida-执行。"><a href="#1、-演示如何监视-jvm-dll该-jvm-正在由名为-fledge-exe（BB-模拟器）的进程使用-Frida-执行。" class="headerlink" title="1、 演示如何监视 jvm.dll该 jvm 正在由名为 fledge.exe（BB 模拟器）的进程使用 Frida 执行。"></a><strong>1、 演示如何监视 jvm.dll该 jvm 正在由名为 fledge.exe（BB 模拟器）的进程使用 Frida 执行。</strong></h5><p><strong>将此代码另存为 bb.py，运行BB模拟器（fledge.exe），然后运行以监视jvm.dll的AES使用情况。python.exe bb.py fledge.exe</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_message</span>(<span class="params">message, data</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[%s] =&gt; %s&quot;</span> % (message, data))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">target_process</span>):</span><br><span class="line">    session = frida.attach(target_process)</span><br><span class="line">    script = session.create_script(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    // Find base address of current imported jvm.dll by main process fledge.exe</span></span><br><span class="line"><span class="string">    // 通过主进程fledge.exe找到当前导入的jvm.dll的基址 </span></span><br><span class="line"><span class="string">    var baseAddr = Module.findBaseAddress(&#x27;Jvm.dll&#x27;);</span></span><br><span class="line"><span class="string">    console.log(&#x27;Jvm.dll baseAddr: &#x27; + baseAddr);</span></span><br><span class="line"><span class="string">    var SetAesDeCrypt0 = resolveAddress(&#x27;0x1FF44870&#x27;); // 这里我们使用反汇编器中看到的函数地址 </span></span><br><span class="line"><span class="string">    Interceptor.attach(SetAesDeCrypt0, &#123; // Intercept calls to our SetAesDecrypt function</span></span><br><span class="line"><span class="string">        // When function is called, print out its parameters</span></span><br><span class="line"><span class="string">        onEnter: function (args) &#123;</span></span><br><span class="line"><span class="string">            console.log(&#x27;&#x27;);</span></span><br><span class="line"><span class="string">            console.log(&#x27;[+] Called SetAesDeCrypt0&#x27; + SetAesDeCrypt0);</span></span><br><span class="line"><span class="string">            console.log(&#x27;[+] Ctx: &#x27; + args[0]);</span></span><br><span class="line"><span class="string">            console.log(&#x27;[+] Input: &#x27; + args[1]); // Plaintext</span></span><br><span class="line"><span class="string">            console.log(&#x27;[+] Output: &#x27; + args[2]); // This pointer will store the de/encrypted data</span></span><br><span class="line"><span class="string">            console.log(&#x27;[+] Len: &#x27; + args[3]); // Length of data to en/decrypt</span></span><br><span class="line"><span class="string">            dumpAddr(&#x27;Input&#x27;, args[1], args[3].toInt32());</span></span><br><span class="line"><span class="string">            this.outptr = args[2]; //存储arg2和arg3以便查看何时离开函数 </span></span><br><span class="line"><span class="string">            this.outsize = args[3].toInt32();</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        // When function is finished</span></span><br><span class="line"><span class="string">        onLeave: function (retval) &#123;</span></span><br><span class="line"><span class="string">            dumpAddr(&#x27;Output&#x27;, this.outptr, this.outsize); // Print out data array, which will contain de/encrypted data as output</span></span><br><span class="line"><span class="string">            console.log(&#x27;[+] Returned from SetAesDeCrypt0: &#x27; + retval);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    function dumpAddr(info, addr, size) &#123;</span></span><br><span class="line"><span class="string">        if (addr.isNull())</span></span><br><span class="line"><span class="string">            return;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        console.log(&#x27;Data dump &#x27; + info + &#x27; :&#x27;);</span></span><br><span class="line"><span class="string">        var buf = addr.readByteArray(size);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        // If you want color magic, set ansi to true 如果你想要颜色魔术，设置ansi为真 </span></span><br><span class="line"><span class="string">        console.log(hexdump(buf, &#123; offset: 0, length: size, header: true, ansi: false &#125;));</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    function resolveAddress(addr) &#123;</span></span><br><span class="line"><span class="string">        var idaBase = ptr(&#x27;0x1FEE0000&#x27;); // 输入您最喜欢的反汇编程序(这里是IDA)中所看到的jvm.dll的基址。 </span></span><br><span class="line"><span class="string">        var offset = ptr(addr).sub(idaBase); // 计算IDA数据库中与基地址在内存中的偏移量 </span></span><br><span class="line"><span class="string">        var result = baseAddr.add(offset); // 将当前内存基地址添加到要监控的函数的偏移量中 </span></span><br><span class="line"><span class="string">        console.log(&#x27;[+] New addr=&#x27; + result); // 将函数在内存中的位置写入控制台 </span></span><br><span class="line"><span class="string">        return result;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line">    script.on(<span class="string">&#x27;message&#x27;</span>, on_message)</span><br><span class="line">    script.load()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[!] Ctrl+D on UNIX, Ctrl+Z on Windows/cmd.exe to detach from instrumented program.\n\n&quot;</span>)</span><br><span class="line">    sys.stdin.read()</span><br><span class="line">    session.detach()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Usage: %s &lt;process name or PID&gt;&quot;</span> % __file__)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        target_process = <span class="built_in">int</span>(sys.argv[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        target_process = sys.argv[<span class="number">1</span>]</span><br><span class="line">    main(target_process)</span><br></pre></td></tr></table></figure><h5 id="2、调用java方法示例一"><a href="#2、调用java方法示例一" class="headerlink" title="2、调用java方法示例一"></a><strong>2、调用java方法示例一</strong></h5><p><strong>perform、$new、use、overload、call、implementation</strong></p><ul><li><strong>执行hook函数方法：</strong>     <strong>a、return this.func(args)    b、return func.call(this,args)</strong> </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// Create an instance of java.lang.String and initialize it with a string</span></span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">JavaString</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.String&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> exampleString1 = <span class="title class_">JavaString</span>.$new(<span class="string">&#x27;Hello World, this is an example string in Java.&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[+] exampleString1: &#x27;</span> + exampleString1);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[+] exampleString1.length(): &#x27;</span> + exampleString1.<span class="title function_">length</span>());</span><br><span class="line">  <span class="comment">// Create an instance of java.nio.charset.Charset, and initialize the default character set</span></span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">Charset</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.nio.charset.Charset&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> charset = <span class="title class_">Charset</span>.<span class="title function_">defaultCharset</span>();</span><br><span class="line">  <span class="comment">// Create a byte array of a Javascript string</span></span><br><span class="line">  <span class="keyword">var</span> charArray = <span class="string">&#x27;This is a Javascript string converted to a byte array.&#x27;</span>.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">c</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> c.<span class="title function_">charCodeAt</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create an instance of java.lang.String and initialize it through an overloaded $new,</span></span><br><span class="line">  <span class="comment">// with a byte array and a instance of java.nio.charset.Charset</span></span><br><span class="line">  <span class="keyword">var</span> exampleString2 = <span class="title class_">JavaString</span>.<span class="property">$new</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;java.nio.charset.Charset&#x27;</span>).<span class="title function_">call</span>(<span class="title class_">JavaString</span>, charArray, charset)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[+] exampleString2: &#x27;</span> + exampleString2);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[+] exampleString2.length(): &#x27;</span> + exampleString2.<span class="title function_">length</span>());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Intercept the initialization of java.lang.Stringbuilder&#x27;s overloaded constructor,</span></span><br><span class="line">  <span class="comment">// and write the partial argument to the console</span></span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">StringBuilder</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.StringBuilder&#x27;</span>);</span><br><span class="line">  <span class="comment">// We need to replace .$init() instead of .$new(), since .$new() = .alloc() + .init()</span></span><br><span class="line">  <span class="keyword">var</span> ctor = <span class="title class_">StringBuilder</span>.<span class="property">$init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>);</span><br><span class="line">  ctor.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">arg</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> partial = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> result = ctor.<span class="title function_">call</span>(<span class="variable language_">this</span>, arg);</span><br><span class="line">    <span class="comment">// var result = this.ctor(arg);</span></span><br><span class="line">    <span class="keyword">if</span> (arg !== <span class="literal">null</span>) &#123;</span><br><span class="line">      partial = arg.<span class="title function_">toString</span>().<span class="title function_">replace</span>(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>).<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// console.log(&#x27;new StringBuilder(java.lang.String); =&gt; &#x27; + result);</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;new StringBuilder(&quot;&#x27;</span> + partial + <span class="string">&#x27;&quot;);&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[+] new StringBuilder(java.lang.String) hooked&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Intercept the toString() method of java.lang.StringBuilder and write its partial contents to the console.</span></span><br><span class="line">  <span class="keyword">var</span> toString = <span class="title class_">StringBuilder</span>.<span class="property">toString</span>;</span><br><span class="line">  toString.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> result = toString.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="keyword">var</span> partial = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (result !== <span class="literal">null</span>) &#123;</span><br><span class="line">      partial = result.<span class="title function_">toString</span>().<span class="title function_">replace</span>(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>).<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;StringBuilder.toString(); =&gt; &#x27;</span> + partial);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[+] StringBuilder.toString() hooked&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="3、调用java方法示例二"><a href="#3、调用java方法示例二" class="headerlink" title="3、调用java方法示例二"></a><strong>3、调用java方法示例二</strong></h5><ul><li><strong>获取context</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                       <span class="keyword">var</span> currentApp = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.app.ActivityThread&quot;</span>).<span class="title function_">currentApplication</span>();</span><br><span class="line">                   <span class="keyword">var</span> context = currentApp.<span class="title function_">getApplicationContext</span>();</span><br><span class="line">                       <span class="keyword">var</span> myHook = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.yxcorp.gifshow.util.CPU&#x27;</span>);</span><br><span class="line">                       <span class="keyword">var</span> result = myHook.$new().<span class="title function_">getClock</span>(context, a, b);</span><br><span class="line">                       <span class="title function_">send</span>(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>构建   Map、ArrayList</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.util.concurrent.ConcurrentHashMap&#x27;</span>).$new();</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ArrayList</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.util.ArrayList&quot;</span>).$new();</span><br><span class="line"><span class="title class_">ArrayList</span>.<span class="title function_">add</span>(<span class="string">&quot;install_id=1218726890853815; ttreq=1$fdc5538bb5493cd9f29b0a55473e3927f8cb3a8c; odin_tt=25822499f8df236a268deea9460adb4417ec63ada4a8cfa7948a9ccc11b7f0d919c65486334f329b6d09f270afb3eb0944662984b557e1183b2ad6125fcf128cca97547ec193459d1dbf5800ffce0d82&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> cookie = <span class="title class_">ArrayList</span></span><br><span class="line">map.<span class="title function_">put</span>(<span class="string">&quot;COOKIE&quot;</span>, cookie)</span><br><span class="line"><span class="keyword">var</span> keyset = map.<span class="title function_">keySet</span>();</span><br><span class="line"><span class="keyword">var</span> it = keyset.<span class="title function_">iterator</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str:t&quot;</span> + str)</span><br><span class="line"><span class="keyword">while</span> (it.<span class="title function_">hasNext</span>()) &#123;</span><br><span class="line">    <span class="keyword">var</span> keystr = it.<span class="title function_">next</span>().<span class="title function_">toString</span>();</span><br><span class="line">    <span class="keyword">var</span> valuestr = map.<span class="title function_">get</span>(keystr).<span class="title function_">toString</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;map:t&quot;</span> + keystr + <span class="string">&quot;t&quot;</span> + valuestr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4、堆栈跟踪用法示例"><a href="#4、堆栈跟踪用法示例" class="headerlink" title="4、堆栈跟踪用法示例"></a><strong>4、堆栈跟踪用法示例</strong></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">Cipher</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;javax.crypto.Cipher&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">Exception</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.Exception&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> <span class="title class_">Log</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;android.util.Log&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> init = <span class="title class_">Cipher</span>.<span class="property">init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;java.security.Key&#x27;</span>);</span><br><span class="line">  init.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">opmode, key</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> result = init.<span class="title function_">call</span>(<span class="variable language_">this</span>, opmode, key);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Cipher.init() opmode:&#x27;</span>, opmode, <span class="string">&#x27;key:&#x27;</span>, key);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">stackTraceHere</span>());</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">stackTraceHere</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Log</span>.<span class="title function_">getStackTraceString</span>(<span class="title class_">Exception</span>.$new());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="5、当出现找不到java类时的解决办法"><a href="#5、当出现找不到java类时的解决办法" class="headerlink" title="5、当出现找不到java类时的解决办法"></a>5、当出现找不到java类时的解决办法</h5><ul><li><strong>报错日志</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Error: java.lang.ClassNotFoundException: Didn&#x27;t find class &quot;com.bytedance.frameworks.baselib.network.http.NetworkParams&quot; on path: </span><br><span class="line">DexPathList[[directory &quot;.&quot;],nativeLibraryDirectories=[/system/lib, /vendor/lib, /system/lib, /vendor/lib]]</span><br><span class="line">    at &lt;anonymous&gt; (frida/node_modules/frida-java-bridge/lib/env.js:124)</span><br><span class="line">    at &lt;anonymous&gt; (frida/node_modules/frida-java-bridge/lib/env.js:115)</span><br><span class="line">    at apply (native)</span><br><span class="line">    at &lt;anonymous&gt; (frida/node_modules/frida-java-bridge/lib/env.js:97)</span><br><span class="line">    at &lt;anonymous&gt; (frida/node_modules/frida-java-bridge/lib/class-factory.js:429)</span><br><span class="line">    at value (frida/node_modules/frida-java-bridge/lib/class-factory.js:812)</span><br><span class="line">    at _make (frida/node_modules/frida-java-bridge/lib/class-factory.js:112)</span><br><span class="line">    at use (frida/node_modules/frida-java-bridge/lib/class-factory.js:63)</span><br><span class="line">    at use (frida/node_modules/frida-java-bridge/index.js:246)</span><br><span class="line">    at hooK_network (/hook_gorgon.js:3)</span><br></pre></td></tr></table></figure><ul><li><strong>获取上下文的classloader,然后使用java.classFactory.use(“className”)</strong><br><strong>注意：一定要使用 Java.perform</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> <span class="title function_">get_classloader</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> application = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.app.Application&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> reflectClass = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Class&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;application: &quot;</span> + application);</span><br><span class="line">    application.<span class="property">attach</span>.<span class="title function_">overload</span>(<span class="string">&#x27;android.content.Context&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">attach</span>(context); <span class="comment">// 先执行原来的attach方法</span></span><br><span class="line">        <span class="keyword">var</span> classloader = context.<span class="title function_">getClassLoader</span>(); <span class="comment">// 获取classloader</span></span><br><span class="line">        <span class="title class_">Java</span>.<span class="property">classFactory</span>.<span class="property">loader</span> = classloader;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hooK_network</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 这里使用java.classFactory.use</span></span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">NetworkParams</span> = <span class="title class_">Java</span>.<span class="property">classFactory</span>.<span class="title function_">use</span>(<span class="string">&quot;com.bytedance.frameworks.baselib.network.http.NetworkParams&quot;</span>); </span><br><span class="line">    <span class="title class_">NetworkParams</span>.<span class="property">tryAddSecurityFactor</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">str, map</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> keyset = map.<span class="title function_">keySet</span>();</span><br><span class="line">        <span class="keyword">var</span> it = keyset.<span class="title function_">iterator</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str:t&quot;</span> + str)</span><br><span class="line">        <span class="keyword">while</span> (it.<span class="title function_">hasNext</span>()) &#123;</span><br><span class="line">            <span class="keyword">var</span> keystr = it.<span class="title function_">next</span>().<span class="title function_">toString</span>();</span><br><span class="line">            <span class="keyword">var</span> valuestr = map.<span class="title function_">get</span>(keystr).<span class="title function_">toString</span>()</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;map:t&quot;</span> + keystr + <span class="string">&quot;t&quot;</span> + valuestr)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> ret</span><br><span class="line">        ret = <span class="variable language_">this</span>.<span class="title function_">tryAddSecurityFactor</span>(str, map);</span><br><span class="line">        <span class="keyword">var</span> keyset = ret.<span class="title function_">keySet</span>();</span><br><span class="line">        <span class="keyword">var</span> it = keyset.<span class="title function_">iterator</span>();</span><br><span class="line">        <span class="keyword">while</span> (it.<span class="title function_">hasNext</span>()) &#123;</span><br><span class="line">            <span class="keyword">var</span> keystr = it.<span class="title function_">next</span>().<span class="title function_">toString</span>();</span><br><span class="line">            <span class="keyword">var</span> valuestr = ret.<span class="title function_">get</span>(keystr).<span class="title function_">toString</span>()</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ret map:*******&quot;</span> + keystr + <span class="string">&quot;*******&quot;</span> + valuestr)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="四、native语法"><a href="#四、native语法" class="headerlink" title="四、native语法"></a>四、native语法</h3><h5 id="1、hook-native-函数"><a href="#1、hook-native-函数" class="headerlink" title="1、hook native 函数"></a>1、hook native 函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_md5_update</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> targetSo = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;liboasiscore.so&quot;</span>);  <span class="comment">// 基地址</span></span><br><span class="line">    <span class="keyword">let</span> relativePtr = <span class="number">0x8AB2</span> + <span class="number">1</span>; <span class="comment">// offset偏移地址，thumb模式 +1 </span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Enter&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> funcPtr = targetSo.<span class="title function_">add</span>(relativePtr);   <span class="comment">// 目标函数指针</span></span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(funcPtr,&#123;</span><br><span class="line">        <span class="attr">onEnter</span>:<span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(args[<span class="number">2</span>]);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">hexdump</span>(args[<span class="number">1</span>],&#123;<span class="attr">length</span>:args[<span class="number">2</span>].<span class="title function_">toInt32</span>()&#125;));</span><br><span class="line"></span><br><span class="line">        &#125;,<span class="attr">onLeave</span>:<span class="keyword">function</span> (<span class="params">retval</span>)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="五、Python脚本"><a href="#五、Python脚本" class="headerlink" title="五、Python脚本"></a>五、Python脚本</h3><h5 id="1、基本使用方法（attach-spawn可以是进程名和进程ID）"><a href="#1、基本使用方法（attach-spawn可以是进程名和进程ID）" class="headerlink" title="1、基本使用方法（attach/spawn可以是进程名和进程ID）"></a><strong>1、基本使用方法（attach/spawn可以是进程名和进程ID）</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"></span><br><span class="line">hook_code = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        rpc.exports = &#123;</span></span><br><span class="line"><span class="string">            getsig: function(a)&#123;</span></span><br><span class="line"><span class="string">                Java.perform(function() &#123;      </span></span><br><span class="line"><span class="string">                        var myHook = Java.use(&#x27;com.kuaishou.android.security.KSecurity&#x27;);                </span></span><br><span class="line"><span class="string">                        var result = myHook.atlasSign(a);</span></span><br><span class="line"><span class="string">                        send(result)</span></span><br><span class="line"><span class="string">                        // myHook.atlasSign.implementation = function (a) &#123;</span></span><br><span class="line"><span class="string">                        //    var result = this.atlasSign(a);</span></span><br><span class="line"><span class="string">                        //    send(result);</span></span><br><span class="line"><span class="string">                        //    return result;</span></span><br><span class="line"><span class="string">                        // &#125;                 </span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            )</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_message</span>(<span class="params">message, data</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[on_message] message:&quot;</span>, message, <span class="string">&quot;data:&quot;</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="comment">#session = frida.attach(&quot;cat&quot;)</span></span><br><span class="line"><span class="comment">#script = session.create_script(&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#rpc.exports.enumerateModules = function () &#123;</span></span><br><span class="line"><span class="comment">#  return Process.enumerateModules();</span></span><br><span class="line"><span class="comment">#&#125;;</span></span><br><span class="line"><span class="comment">#&quot;&quot;&quot;)</span></span><br><span class="line"><span class="comment"># print([m[&quot;name&quot;] for m in script.exports.enumerate_modules()])</span></span><br><span class="line"></span><br><span class="line">session = frida.get_usb_device(<span class="number">100</span>).attach(<span class="string">&#x27;com.smile.gifmaker&#x27;</span>)</span><br><span class="line"><span class="comment"># session = frida.get_remote_device().attach(&#x27;com.smile.gifmaker&#x27;)</span></span><br><span class="line">script = session.create_script(hook_code)</span><br><span class="line">script.on(<span class="string">&quot;message&quot;</span>, on_message)</span><br><span class="line">script.load()</span><br><span class="line">a = <span class="string">&quot;/rest/n/comment/list/firstPage&quot;</span> + <span class="string">&quot;19c97dfca7f4532c279b428a0a361b36&quot;</span></span><br><span class="line">script.exports.getsig(a)</span><br></pre></td></tr></table></figure><h5 id="2、在目标进程中接收消息（post、recv）"><a href="#2、在目标进程中接收消息（post、recv）" class="headerlink" title="2、在目标进程中接收消息（post、recv）"></a><strong>2、在目标进程中接收消息（post、recv）</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">session = frida.attach(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">script = session.create_script(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    recv(&#x27;poke&#x27;, function onMessage(pokeMessage) &#123; send(&#x27;pokeBack&#x27;); &#125;);</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_message</span>(<span class="params">message, data</span>):</span><br><span class="line">    <span class="built_in">print</span>(message)</span><br><span class="line">script.on(<span class="string">&#x27;message&#x27;</span>, on_message)</span><br><span class="line">script.load()</span><br><span class="line">script.post(&#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;poke&quot;</span>&#125;)</span><br><span class="line">sys.stdin.read()</span><br><span class="line"></span><br><span class="line"><span class="comment">#recv（） 的机制</span></span><br><span class="line"><span class="comment">#recv（） 方法本身是异步的（非阻塞）。注册的回调（onMessage）将只接收一条消息。要接收下一条消息，必须使用 recv（） 重新注册回调。</span></span><br></pre></td></tr></table></figure><h5 id="3、阻止目标进程中的接收"><a href="#3、阻止目标进程中的接收" class="headerlink" title="3、阻止目标进程中的接收"></a><strong>3</strong>、<strong>阻止目标进程中的接收</strong></h5><p><strong>可以等待消息到达（阻塞接收）</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">session = frida.attach(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">script = session.create_script(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Interceptor.attach(ptr(&quot;%s&quot;), &#123;</span></span><br><span class="line"><span class="string">    onEnter: function(args) &#123;</span></span><br><span class="line"><span class="string">        send(args[0].toString());</span></span><br><span class="line"><span class="string">        var op = recv(&#x27;input&#x27;, function(value) &#123;</span></span><br><span class="line"><span class="string">            args[0] = ptr(value.payload);</span></span><br><span class="line"><span class="string">        &#125;);</span></span><br><span class="line"><span class="string">        op.wait();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span> % <span class="built_in">int</span>(sys.argv[<span class="number">1</span>], <span class="number">16</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_message</span>(<span class="params">message, data</span>):</span><br><span class="line">    <span class="built_in">print</span>(message)</span><br><span class="line">    val = <span class="built_in">int</span>(message[<span class="string">&#x27;payload&#x27;</span>], <span class="number">16</span>)</span><br><span class="line">    script.post(&#123;<span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;input&#x27;</span>, <span class="string">&#x27;payload&#x27;</span>: <span class="built_in">str</span>(val * <span class="number">2</span>)&#125;)</span><br><span class="line">script.on(<span class="string">&#x27;message&#x27;</span>, on_message)</span><br><span class="line">script.load()</span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure><h3 id="六、frida-ps、frida-ls-devices、frida-kill"><a href="#六、frida-ps、frida-ls-devices、frida-kill" class="headerlink" title="六、frida-ps、frida-ls-devices、frida-kill"></a>六、frida-ps、frida-ls-devices、frida-kill</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Connect Frida to an iPad over USB and list running processes 通过USB将Frida连接到iPad，并列出正在运行的进程 </span><br><span class="line">$ frida-ps -U</span><br><span class="line"># List running applications 运行应用程序列表</span><br><span class="line">$ frida-ps -Ua</span><br><span class="line"># List installed applications  已安装的应用程序列表</span><br><span class="line">$ frida-ps -Uai</span><br><span class="line"># Connect Frida to the specific device 将Frida连接到特定的设备</span><br><span class="line">$ frida-ps -D 0216027d1d6d3a03</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Connect Frida to an iPad over USB and list running processes 通过USB将Frida连接到iPad，并列出正在运行的进程 </span><br><span class="line">frida-ls-devices</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># 这是一个用来终止进程的命令行工具,您可以从frida-ps工具获取pid。 </span><br><span class="line">$ frida-kill -D &lt;DEVICE-ID&gt; &lt;PID&gt;</span><br><span class="line"># List active applications</span><br><span class="line">$ frida-ps -D 1d07b5f6a7a72552aca8ab0e6b706f3f3958f63e  -a</span><br><span class="line">PID  Name                Identifier</span><br><span class="line">----  ------------------  -----------------------------------------------------</span><br><span class="line">4433  Camera              com.apple.camera</span><br><span class="line">4001  Cydia               com.saurik.Cydia</span><br><span class="line">4997  Filza               com.tigisoftware.Filza</span><br><span class="line">4130  IPA Installer       com.slugrail.ipainstaller</span><br><span class="line">3992  Mail                com.apple.mobilemail</span><br><span class="line">4888  Maps                com.apple.Maps</span><br><span class="line">6494  Messages            com.apple.MobileSMS</span><br><span class="line">5029 Safari              com.apple.mobilesafari</span><br><span class="line">4121  Settings            com.apple.Preferences</span><br><span class="line"></span><br><span class="line"># Connect Frida to the device and kill running process</span><br><span class="line">$ frida-kill -D 1d07b5f6a7a72552aca8ab0e6b706f3f3958f63e 5029</span><br><span class="line"></span><br><span class="line"># Check if process has been killed</span><br><span class="line">$ frida-ps -D 1d07b5f6a7a72552aca8ab0e6b706f3f3958f63e  -a</span><br><span class="line">PID  Name                Identifier</span><br><span class="line">----  ------------------  -----------------------------------------------------</span><br><span class="line">4433  Camera              com.apple.camera</span><br><span class="line">4001  Cydia               com.saurik.Cydia</span><br><span class="line">4997  Filza               com.tigisoftware.Filza</span><br><span class="line">4130  IPA Installer       com.slugrail.ipainstaller</span><br><span class="line">3992  Mail                com.apple.mobilemail</span><br><span class="line">4888  Maps                com.apple.Maps</span><br><span class="line">6494  Messages            com.apple.MobileSMS</span><br><span class="line">4121  Settings            com.apple.Preferences</span><br></pre></td></tr></table></figure><h3 id="七、frida工具插件"><a href="#七、frida工具插件" class="headerlink" title="七、frida工具插件"></a>七、frida工具插件</h3><h4 id="1、jnitrace"><a href="#1、jnitrace" class="headerlink" title="1、jnitrace"></a>1、<a href="https://github.com/chame1eon/jnitrace">jnitrace</a></h4><ul><li><p><strong>JNItrace辅助分析：是一个基于Frida框架的Hook jni方法的库</strong></p></li><li><p><strong>安装：pip install jnitrace</strong> </p></li><li><p><strong>官网：<a href="https://pypi.org/project/jnitrace/">jnitrace · PyPI</a></strong></p></li><li><p><strong>JNItrace提供了Spawn和Attach两种附加模式，但测试发现，<u>在不少情况下，Attach模式存在BUG，会缺少输出或者无输出</u>，具体原因未知，因此我采用默认的spawn模式对libbili.so里发生的所有JNI调用进行Hook，关于参数的具体意义，可以看JNItrace的介绍：</strong></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">optional arguments:</span><br><span class="line">  -h, --help            show this help message and exit</span><br><span class="line">  -m &#123;spawn,attach&#125;, --inject-method &#123;spawn,attach&#125;</span><br><span class="line">                        Specify how frida should inject into the process.</span><br><span class="line">  -R [REMOTE], --remote [REMOTE]</span><br><span class="line">                        Connect to remote Frida server in the format IP:PORT</span><br><span class="line">  -b &#123;fuzzy,accurate,none&#125;, --backtrace &#123;fuzzy,accurate,none&#125;</span><br><span class="line">                        Print a backtrace from each JNI call.</span><br><span class="line">  -i INCLUDE, --include INCLUDE</span><br><span class="line">                        A regex filter to include a JNIEnv or JavaVM method name.</span><br><span class="line">  -e EXCLUDE, --exclude EXCLUDE</span><br><span class="line">                        A regex filter to exclude a JNIEnv or JavaVM method name.</span><br><span class="line">  -I INCLUDE_EXPORT, --include-export INCLUDE_EXPORT</span><br><span class="line">                        A list of library exports to trace from.</span><br><span class="line">  -E EXCLUDE_EXPORT, --exclude-export EXCLUDE_EXPORT</span><br><span class="line">                        A list of library exports to avoid tracing from.</span><br><span class="line">  --hide-data           Print contents of argument.</span><br><span class="line">  --ignore-env          Do not trace JNIEnv calls.</span><br><span class="line">  --ignore-vm           Do not trace JavaVM calls.</span><br><span class="line">  -p PREPEND, --prepend PREPEND</span><br><span class="line">                        Prepend a Frida script to run before jnitrace does.</span><br><span class="line">  -a APPEND, --append APPEND</span><br><span class="line">                        Append a Frida script to run after jnitrace has started.</span><br><span class="line">  -o OUTPUT, --output OUTPUT</span><br><span class="line">                        Output trace data to a JSON formatted file.</span><br><span class="line">  -v, --version         Show the installed version of jnitrace.</span><br><span class="line">  -l LIBRARIES, --libraries LIBRARIES</span><br><span class="line">                        Specify a native libraries to track JNI calls from. Enter * to track all libraries or use the argument multiple times to specify a set of libraries.</span><br><span class="line">  --aux name=(string|bool|int)value</span><br><span class="line">                        set aux option when spawning</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># spawn</span><br><span class="line">jnitrace tv.danmaku.bili -l libbili.so --ignore-vm -o log.json  # tv.danmaku.bili包名 --ignore-vm 忽略java层 -o 输入日志(json)</span><br></pre></td></tr></table></figure><h4 id="2、ZenTracer"><a href="#2、ZenTracer" class="headerlink" title="2、ZenTracer"></a>2、ZenTracer</h4><ul><li><p><strong>基于Pyqt+Frida开发，短小精悍，可模糊匹配Java层的 包名、类名、方法名。</strong></p></li><li><p><strong>参考链接：<a href="https://blog.csdn.net/qq_38851536/article/details/103755407?spm=1001.2014.3001.5502">https://blog.csdn.net/qq_38851536/article/details/103755407?spm=1001.2014.3001.5502</a></strong></p></li><li><p><strong>下载链接：<a href="https://github.com/hluwa/ZenTracer">https://github.com/hluwa/ZenTracer</a></strong></p></li><li><h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5></li></ul><p>在逆向分析的过程中，因为经常要面对海量的代码，往往都会尝试很多小技巧来准确高效的定位关键点，tracer就是其中之一。Tracer顾名思义就是用来追踪代码(执行)的工具，当然，根据需求的不同，tracer也分几类，比如trace指令，trace函数，trace文件操作等，Zentracer实现了对Android Java方法的Tracer。——葫芦娃</p><p>当你知道关键代码位于某个方法时，Objection一定是最好的选择；<br>当你只知道关键代码位于某个类时，Objection同样有用，但有些吃力，不够直观，也不够强大。<br>当你只知道关键代码位于/猜测在于某个包(package，指的不是APK包)中，Zentracer就是你最好的选择。</p><p>个人观点：优势主要在于——别的Tracer都没有GUI界面，不如它直观好看，有GUI界面的Tracer，比如Dwarf所提供的gui trace，又太笨重，而Zentracer就两三个文件，清爽舒服</p><ul><li><strong>使用方法</strong></li></ul><p>下载安装—-&gt; 打开应用—&gt; 打开ZenTracer.py</p><h4 id="3、Objection"><a href="#3、Objection" class="headerlink" title="3、Objection"></a>3、Objection</h4><p><strong><em>objection是一个基于Frida开发的命令行工具，它可以很方便的Hook Java函数和类，并输出参数，调用栈，返回值。</em></strong></p><h5 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a><strong>安装使用</strong></h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1pip install objection</span><br><span class="line"></span><br><span class="line">2保证Frida server开启</span><br><span class="line"></span><br><span class="line">3命令行输出 objection -g packageName explore</span><br><span class="line">即可进入objection提供的交互界面，类似于Frida的cli交互环境，我们下面的操作都是基于这个交互界面。</span><br></pre></td></tr></table></figure><h5 id="Hook-Java方法"><a href="#Hook-Java方法" class="headerlink" title="Hook Java方法"></a><strong>Hook Java方法</strong></h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class_method com.xxx.xxx.methodName --dump-args --dump-backtrace --dump-return</span><br><span class="line"># 例子</span><br><span class="line">android hooking watch class_method ms.bd.c.g2$a.LIZ --dump-args --dump-backtrace --dump-return</span><br></pre></td></tr></table></figure><h5 id="Hook-Java类"><a href="#Hook-Java类" class="headerlink" title="Hook Java类"></a>Hook Java类</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android hooking watch class com.xxx.xxx</span><br></pre></td></tr></table></figure><h5 id="Spawn方式Hook"><a href="#Spawn方式Hook" class="headerlink" title="Spawn方式Hook"></a><strong>Spawn方式Hook</strong></h5><p>从Objection的使用操作中我们可以发现，Obejction采用Attach附加模式进行Hook，这可能会让我们错过较早的Hook时机，可以通过如下的代码启动Objection，引号中的objection命令会在启动时就注入App。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">objection -g packageName explore --startup-command &#x27;[obejection_command]&#x27;</span><br><span class="line">objection -g packageName explore --startup-command &#x27;android hooking watch xxx&#x27; </span><br><span class="line">objection -g com.ss.android.ugc.aweme explore --startup-command &#x27;android hooking watch class_method ms.bd.c.g2$a.LIZ --dump-args --dump-backtrace --dump-return&#x27;</span><br></pre></td></tr></table></figure><h5 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h5><ul><li>缺少对Native层的支持</li><li>对象类型数据的打印有问题，比如Byte array和Json，会显示成[object, object]</li><li>对Spawn方式启动的支持不够顺畅</li></ul>]]></content>
      
      
      <categories>
          
          <category> 安卓逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frida </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>App抓包</title>
      <link href="/article/charles/"/>
      <url>/article/charles/</url>
      
        <content type="html"><![CDATA[<!-- * content --><!-- {:toc} --><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>分享一些个人在App抓包过程的一些经验，本文使用的是charles，其他抓包工具如fiddler、wireshark等大同小异，可自行选择。</p><h2 id="charles安装配置"><a href="#charles安装配置" class="headerlink" title="charles安装配置"></a>charles安装配置</h2><p>下载地址：<a href="https://www.charlesproxy.com/">Charles Web Debugging Proxy • HTTP Monitor / HTTP Proxy / HTTPS &amp; SSL Proxy / Reverse Proxy (charlesproxy.com)</a></p><p><img src="../images/爬虫之抓包/22B01.jpeg" alt="22B01"></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
